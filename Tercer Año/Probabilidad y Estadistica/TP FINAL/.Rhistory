lambda <- 18
t <- 0.5
tiempos <- c()
tAcumulado <- 0
while (tAcumulado < t) {
T_i <- rexp(n = 1, rate = lambda)
if (tAcumulado + T_i > t) break
tAcumulado <- tAcumulado + T_i
tiempos <- c(tiempos, tAcumulado)
}
simular_proceso <- function(tiempos, tFinal) {
tiempos_xt <- c(0, tiempos_llegada, tiempo_final)
valores_xt <- 0:(length(tiempos_llegada))
valores_xt <- c(valores_xt, valores_xt[length(valores_xt)])
return(list(tiempo = tiempos_xt, Xt = valores_xt))
}
graficar_trayectoria_poisson <- function(tiempo, Xt) {
plot(tiempo, Xt, type = "n", xlab = "Tiempo", ylab = "Número de llegadas",
main = "Trayectoria de un proceso de Poisson")
lines(tiempo, Xt, type = "s", col = "blue")
points(tiempo, Xt, pch = 19, col = "red")
legend("topleft", legend = c("Proceso $X_t$", "Eventos (saltos)"),
col = c("blue", "red"), lty = c(1, NA), pch = c(NA, 19))
}
graficar_trayectoria_poisson <- function(tiempo, Xt) {
plot(tiempo, Xt, type = "n", xlab = "Tiempo", ylab = "Número de llegadas",
main = "Trayectoria de un proceso de Poisson")
lines(tiempo, Xt, type = "s", col = "blue")
points(tiempo, Xt, pch = 19, col = "red")
legend("topleft", legend = c("Proceso $X_t$", "Eventos (saltos)"),
col = c("blue", "red"), lty = c(1, NA), pch = c(NA, 19))
}
View(graficar_trayectoria_poisson)
resultado <- simular_proceso(tiempos, t)
simular_proceso_poisson <- function(tiempos, tFinal) {
tiempos_xt <- c(0, tiempos, tFinal)
valores_xt <- 0:(length(tiempos))
valores_xt <- c(valores_xt, valores_xt[length(valores_xt)])
return(list(tiempo = tiempos_xt, Xt = valores_xt))
}
graficar_trayectoria_poisson <- function(tiempo, Xt) {
plot(tiempo, Xt, type = "n", xlab = "Tiempo", ylab = "Número de llegadas",
main = "Trayectoria de un proceso de Poisson")
lines(tiempo, Xt, type = "s", col = "blue")
points(tiempo, Xt, pch = 19, col = "red")
legend("topleft", legend = c("Proceso $X_t$", "Eventos (saltos)"),
col = c("blue", "red"), lty = c(1, NA), pch = c(NA, 19))
}
resultado <- simular_proceso(tiempos, t)
return(list(tiempo = tiempos_xt, Xt = valores_xt))
simular_proceso_poisson <- function(tiempos, tFinal) {
tiempos_xt <- c(0, tiempos, tFinal)
valores_xt <- 0:(length(tiempos))
valores_xt <- c(valores_xt, valores_xt[length(valores_xt)])
return(list(tiempo = tiempos_xt, Xt = valores_xt))
}
graficar_trayectoria_poisson <- function(tiempo, Xt) {
plot(tiempo, Xt, type = "n", xlab = "Tiempo", ylab = "Número de llegadas",
main = "Trayectoria de un proceso de Poisson")
lines(tiempo, Xt, type = "s", col = "blue")
points(tiempo, Xt, pch = 19, col = "red")
legend("topleft", legend = c("Proceso $X_t$", "Eventos (saltos)"),
col = c("blue", "red"), lty = c(1, NA), pch = c(NA, 19))
}
resultado <- simular_proceso(tiempos, t)
lambda <- 18
t <- 0.5
tiempos <- c()
tAcumulado <- 0
while (tAcumulado < t) {
T_i <- rexp(n = 1, rate = lambda)
if (tAcumulado + T_i > t) break
tAcumulado <- tAcumulado + T_i
tiempos <- c(tiempos, tAcumulado)
}
simular_proceso_poisson <- function(tiempos, tFinal) {
tiempos_xt <- c(0, tiempos, tFinal)
valores_xt <- 0:(length(tiempos))
valores_xt <- c(valores_xt, valores_xt[length(valores_xt)])
return(list(tiempo = tiempos_xt, Xt = valores_xt))
}
graficar_trayectoria_poisson <- function(tiempo, Xt) {
plot(tiempo, Xt, type = "n", xlab = "Tiempo", ylab = "Número de llegadas",
main = "Trayectoria de un proceso de Poisson")
lines(tiempo, Xt, type = "s", col = "blue")
points(tiempo, Xt, pch = 19, col = "red")
legend("topleft", legend = c("Proceso $X_t$", "Eventos (saltos)"),
col = c("blue", "red"), lty = c(1, NA), pch = c(NA, 19))
}
resultado <- simular_proceso(tiempos, t)
resultado <- simular_proceso_poisson(tiempos, t)
visualizar_proceso(resultado$time, resultado$walk)
graficar_trayectoria_poisson(resultado$time, resultado$walk)
tiempos <- simular_proceso_poisson(lambda, t)
resultado <- generar_trayectoria_poisson(tiempos, t)
lambda <- 18
t <- 0.5
tiempos <- c()
tAcumulado <- 0
while (tAcumulado < t) {
T_i <- rexp(n = 1, rate = lambda)
if (tAcumulado + T_i > t) break
tAcumulado <- tAcumulado + T_i
tiempos <- c(tiempos, tAcumulado)
}
generar_trayectoria_poisson  <- function(tiempos, tFinal) {
tiempos_xt <- c(0, tiempos, tFinal)
valores_xt <- 0:(length(tiempos))
valores_xt <- c(valores_xt, valores_xt[length(valores_xt)])
return(list(tiempo = tiempos_xt, Xt = valores_xt))
}
graficar_trayectoria_poisson <- function(tiempo, Xt) {
plot(tiempo, Xt, type = "n", xlab = "Tiempo", ylab = "Número de llegadas",
main = "Trayectoria de un proceso de Poisson")
lines(tiempo, Xt, type = "s", col = "blue")
points(tiempo, Xt, pch = 19, col = "red")
legend("topleft", legend = c("Proceso $X_t$", "Eventos (saltos)"),
col = c("blue", "red"), lty = c(1, NA), pch = c(NA, 19))
}
tiempos <- simular_proceso_poisson(lambda, t)
tiempos <- generar_trayectoria_poisson(lambda, t)
resultado <- generar_trayectoria_poisson(tiempos, t)
graficar_trayectoria_poisson(resultado$tiempo, resultado$Xt)
simular_proceso <- function(tiempos, t_final) {
# armamos valores x (tiempos) y y (conteo de eventos)
tiempos_plot <- c(0, tiempos, t_final)
conteo_plot <- 0:(length(tiempos))
conteo_plot <- c(conteo_plot, conteo_plot[length(conteo_plot)])  # último valor constante
return(list(time = tiempos_plot, walk = conteo_plot))
}
visualizar_proceso <- function(time, walk) {
plot(time, walk, type = "n", xlab = "Tiempo", ylab = "Conteo",
main = "Trayectoria de un proceso de Poisson")
lines(time, walk, type = "s", col = "blue")
points(time, walk, pch = 19, col = "red")
legend("topleft", legend = c("Caminata", "Eventos"),
col = c("blue", "red"), lty = c(1, NA), pch = c(NA, 19))
}
resultado <- simular_proceso(tiempos, t)
visualizar_proceso(resultado$time, resultado$walk)
lambda <- 18
t <- 0.5
tiempos <- c()
tAcumulado <- 0
while (tAcumulado < t) {
T_i <- rexp(n = 1, rate = lambda)
if (tAcumulado + T_i > t) break
tAcumulado <- tAcumulado + T_i
tiempos <- c(tiempos, tAcumulado)
}
simular_proceso <- function(tiempos, t_final) {
# armamos valores x (tiempos) y y (conteo de eventos)
tiempos_plot <- c(0, tiempos, t_final)
conteo_plot <- 0:(length(tiempos))
conteo_plot <- c(conteo_plot, conteo_plot[length(conteo_plot)])  # último valor constante
return(list(time = tiempos_plot, walk = conteo_plot))
}
visualizar_proceso <- function(time, walk) {
plot(time, walk, type = "n", xlab = "Tiempo", ylab = "Conteo",
main = "Trayectoria de un proceso de Poisson")
lines(time, walk, type = "s", col = "blue")
points(time, walk, pch = 19, col = "red")
legend("topleft", legend = c("Caminata", "Eventos"),
col = c("blue", "red"), lty = c(1, NA), pch = c(NA, 19))
}
resultado <- simular_proceso(tiempos, t)
visualizar_proceso(resultado$time, resultado$walk)
visualizar_proceso <- function(tiempo, X_t) {
plot(tiempo, X_t, type = "n", xlab = "Tiempo", ylab = "Número de llegadas",
main = "Trayectoria de un proceso de Poisson")
lines(tiempo, X_t, type = "s", col = "blue")
points(tiempo, X_t, pch = 19, col = "red")
legend("topleft", legend = c("Proceso $X_t$", "Saltos"),
col = c("blue", "red"), lty = c(1, NA), pch = c(NA, 19))
}
resultado <- simular_proceso(tiempos, t)
visualizar_proceso(resultado$time, resultado$walk)
legend("topleft", legend = c("Proceso X_t", "Saltos"),
col = c("blue", "red"), lty = c(1, NA), pch = c(NA, 19))
visualizar_proceso <- function(tiempo, X_t) {
plot(tiempo, X_t, type = "n", xlab = "Tiempo", ylab = "Número de llegadas",
main = "Trayectoria de un proceso de Poisson")
lines(tiempo, X_t, type = "s", col = "blue")
points(tiempo, X_t, pch = 19, col = "red")
legend("topleft", legend = c("Proceso X_t", "Saltos"),
col = c("blue", "red"), lty = c(1, NA), pch = c(NA, 19))
}
resultado <- simular_proceso(tiempos, t)
visualizar_proceso(resultado$time, resultado$walk)
while (tAcumulado < t) {
T_i <- rexp(n = 1, rate = lambda)
if (tAcumulado + T_i > t) break
tAcumulado <- tAcumulado + T_i
tiempos <- c(tiempos, tAcumulado)
}
simular_proceso <- function(tiempos, tFinal) {
tiemposX_t <- c(0, tiempos, tFinal)
valoresX_t <- 0:(length(tiempos))
valoresX_t <- c(conteo_plot, conteo_plot[length(conteo_plot)])
return(list(tiemposX_t, X_t = valoresX_t))
}
visualizar_proceso <- function(tiempo, X_t) {
plot(tiempo, X_t, type = "n", xlab = "Tiempo", ylab = "Número de llegadas",
main = "Trayectoria de un proceso de Poisson")
lines(tiempo, X_t, type = "s", col = "blue")
points(tiempo, X_t, pch = 19, col = "red")
legend("topleft", legend = c("Proceso X_t", "Saltos"),
col = c("blue", "red"), lty = c(1, NA), pch = c(NA, 19))
}
resultado <- simular_proceso(tiempos, t)
visualizar_proceso(resultado$time, resultado$walk)
return(list(tiemposX_t, X_t = valoresX_t))
simular_proceso <- function(tiempos, tFinal) {
tiemposX_t <- c(0, tiempos, tFinal)
valoresX_t <- 0:(length(tiempos))
valoresX_t <- c(valoresX_t, valoresX_t[length(valoresX_t)])
return(list(tiemposX_t, X_t = valoresX_t))
}
simular_proceso <- function(tiempos, tFinal) {
tiemposX_t <- c(0, tiempos, tFinal)
valoresX_t <- 0:(length(tiempos))
valoresX_t <- c(valoresX_t, valoresX_t[length(valoresX_t)])
return(list(tiemposX_t, X_t = valoresX_t))
}
visualizar_proceso <- function(tiempo, X_t) {
plot(tiempo, X_t, type = "n", xlab = "Tiempo", ylab = "Número de llegadas",
main = "Trayectoria de un proceso de Poisson")
lines(tiempo, X_t, type = "s", col = "blue")
points(tiempo, X_t, pch = 19, col = "red")
legend("topleft", legend = c("Proceso X_t", "Saltos"),
col = c("blue", "red"), lty = c(1, NA), pch = c(NA, 19))
}
resultado <- simular_proceso(tiempos, t)
visualizar_proceso(resultado$time, resultado$walk)
simular_proceso <- function(tiempos, tFinal) {
tiemposX_t <- c(0, tiempos, tFinal)
valoresX_t <- 0:(length(tiempos))
valoresX_t <- c(valoresX_t, valoresX_t[length(valoresX_t)])
return(list(tiempo = tiemposX_t, X_t = valoresX_t))
}
visualizar_proceso <- function(tiempo, X_t) {
plot(tiempo, X_t, type = "n", xlab = "Tiempo", ylab = "Número de llegadas",
main = "Trayectoria de un proceso de Poisson")
lines(tiempo, X_t, type = "s", col = "blue")
points(tiempo, X_t, pch = 19, col = "red")
legend("topleft", legend = c("Proceso X_t", "Saltos"),
col = c("blue", "red"), lty = c(1, NA), pch = c(NA, 19))
}
resultado <- simular_proceso(tiempos, t)
visualizar_proceso(resultado$time, resultado$walk)
resultado <- simular_proceso(tiempos, t)
visualizar_proceso(resultado$tiempo, resultado$X_t)
View(visualizar_proceso)
View(simular_proceso)
